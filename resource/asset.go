// Code generated by go-bindata.
// sources:
// resource/asset.go
// resource/config.yml
// resource/seelog.xml
// DO NOT EDIT!

package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourceAssetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resourceAssetGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceAssetGo,
		"resource/asset.go",
	)
}

func resourceAssetGo() (*asset, error) {
	bytes, err := resourceAssetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/asset.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1514430952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceConfigYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x52\xc3\x30\x0c\x80\xe1\xdd\x4f\xa1\x17\x70\x52\x17\x0a\xad\x67\xd6\x4e\x0c\xcc\x6a\x2c\x82\xae\xb5\x95\x5a\x4a\x43\x79\x7a\xce\x29\x0b\x93\xcf\xa7\xff\x3e\x09\x17\x8d\x0e\x80\xc5\xda\x03\x40\x25\x4d\xc2\xc5\x22\x2c\xaa\xb1\xef\x71\x38\x25\xfa\x1c\x37\x61\xfb\xf4\xbc\x7b\x79\xdd\x1f\x3a\x16\xeb\x70\xf2\x45\xaa\x7d\x11\xaa\xf9\xd0\x61\xc6\x1f\x29\xb8\x68\x37\x48\xee\xf3\xd5\x6c\xb5\x2a\x8d\x2c\x25\xc2\xff\x7a\x1d\x29\xd5\x1b\x0f\xe4\x0b\x66\x8a\x6d\x7b\xa2\xf6\x1f\xd1\x68\xc1\xfb\x9a\x34\xe6\x71\x13\x80\x72\x19\x29\xf9\x4a\xd7\x99\xd4\x3c\x7d\x4f\x5c\x49\x23\x84\xfd\xe6\xaf\x18\x2e\x4c\xc5\x3c\xa7\x08\x05\xeb\x7c\x16\xe7\xb2\x14\x51\xe3\xe1\xdc\x94\x87\x1f\xa1\x4f\x74\xeb\xcd\xee\xdd\xac\x27\xa5\xca\x78\xf1\xc7\x8f\xe3\xe1\x3d\xbc\x39\x80\x13\xce\x29\x42\x08\xbb\xed\xa6\xb9\x95\x30\x79\xe3\x4c\x32\x5b\x84\x9d\x73\xbf\x01\x00\x00\xff\xff\x9b\x8a\xdc\x94\x2d\x01\x00\x00")

func resourceConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourceConfigYml,
		"resource/config.yml",
	)
}

func resourceConfigYml() (*asset, error) {
	bytes, err := resourceConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/config.yml", size: 301, mode: os.FileMode(420), modTime: time.Unix(1514430266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceSeelogXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\x4e\x4d\xcd\xc9\x4f\xb7\xe3\x52\x50\xb0\xc9\x2f\x2d\x29\x28\x2d\x29\x56\x48\xcb\x2f\xca\x4d\x2c\xc9\x4c\xb1\x55\xca\x4d\xcc\xcc\x53\x02\xc9\x29\x28\xd8\x24\xe7\xe7\x15\xe7\xe7\xa4\x2a\xe8\x83\xd5\xea\x43\x15\x83\x39\x10\x0d\xc5\x50\x85\x10\x9e\x02\x5c\x3f\xd4\x3c\x5b\x25\x55\x97\xc4\x92\x54\x05\xd5\x90\xcc\xdc\x54\x85\x68\x55\x9f\xd4\xb2\x58\x05\x55\xdf\xe2\x74\xd5\x3c\x25\xa8\x99\x70\x73\x6c\xf4\x61\xce\x02\x04\x00\x00\xff\xff\xab\x51\x25\xb2\xa0\x00\x00\x00")

func resourceSeelogXmlBytes() ([]byte, error) {
	return bindataRead(
		_resourceSeelogXml,
		"resource/seelog.xml",
	)
}

func resourceSeelogXml() (*asset, error) {
	bytes, err := resourceSeelogXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/seelog.xml", size: 160, mode: os.FileMode(420), modTime: time.Unix(1514388344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/asset.go": resourceAssetGo,
	"resource/config.yml": resourceConfigYml,
	"resource/seelog.xml": resourceSeelogXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resource": &bintree{nil, map[string]*bintree{
		"asset.go": &bintree{resourceAssetGo, map[string]*bintree{}},
		"config.yml": &bintree{resourceConfigYml, map[string]*bintree{}},
		"seelog.xml": &bintree{resourceSeelogXml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

